import{H as _,I as E,J as l,K as g,M as w,N as i,O as m,Q as c,U as u,V as d,W as p}from"./index-s5dWOfUD.js";const k={apiKey:"AIzaSyB1BU5CeOtt7NYUYNcSL16DlVntUnvTCdU",authDomain:"jobpal-2ee1f.firebaseapp.com",projectId:"jobpal-2ee1f",storageBucket:"jobpal-2ee1f.firebasestorage.app",messagingSenderId:"1019457227078",appId:"1:1019457227078:web:a96f325c535dd45f833d47",measurementId:"G-41ZPEVZJM0"},$=_(k),n=E($),q=async(a,e)=>{try{const r=l(n,"users",a,"jobs",e),s=await g(r);if(s.exists())return s.data();throw new Error("Job not found")}catch(r){throw console.error("Error fetching job details:",r),r}},J=async(a,e)=>{if(!a||!e)return console.error("Invalid parameters: uid or jobId is missing"),0;try{const r=l(n,"users",a,"jobs",e);return await w(r),console.log(`Job with ID ${e} deleted successfully`),1}catch(r){return console.error("Error deleting job:",r),0}},j=async(a,e)=>{try{if(!e.name||e.name.trim()==="")return"Job name cannot be empty";const r=i(n,"users",a,"jobs"),s=m(r,c("name","==",e.name));if(!(await u(s)).empty)throw new Error(`Job "${e.name}" already exists`);const t=l(r);return await p(t,e),console.log(`Job "${e.name}" added successfully with ID: ${t.id}`),{jobId:t.id}}catch(r){throw console.error("Error adding job:",r),r}},L=async a=>{try{const e=i(n,"users",a,"jobs"),r=await u(e);if(r.empty)return console.log("No Jobs found for this user."),[];const s=[];return r.forEach(o=>{s.push({id:o.id,...o.data()})}),s}catch(e){throw console.error("Error fetching all Jobs:",e),e}},M=async(a,e,r)=>{if(!a||!e||!r||!r.name)return console.error("Invalid parameters: Missing uid, jobId, or updatedJob data"),0;try{const s=i(n,"users",a,"jobs"),o=m(s,c("name","==",r.name),c("__name__","!=",e));if(!(await u(o)).empty)return console.warn(`Job with name "${r.name}" already exists.`),`Job with name "${r.name}" already exists`;const f=l(n,"users",a,"jobs",e);return await d(f,r),console.log(`Job with ID ${e} updated successfully`),1}catch(s){return console.error("Error updating job:",s),0}},b=async(a,e)=>{try{const r=l(n,"users",a,"skills",e),s=await g(r);if(s.exists())return s.data();throw new Error("Skill not found")}catch(r){throw console.error("Error fetching skill details:",r),r}},x=async(a,e)=>{if(!a||!e)return console.error("Invalid parameters: uid or skillId is missing"),0;try{const r=l(n,"users",a,"skills",e);return await w(r),console.log(`Skill with ID ${e} deleted successfully`),1}catch(r){return console.error("Error deleting skill:",r),0}},v=async(a,e)=>{try{if(!e.name||e.name.trim()==="")return"Skill name cannot be empty";const r=i(n,"users",a,"skills"),s=m(r,c("name","==",e.name));if(!(await u(s)).empty)throw new Error(`Skill "${e.name}" already exists`);const t=l(r);return await p(t,e),console.log(`Skill "${e.name}" added successfully with ID: ${t.id}`),{skillId:t.id}}catch(r){throw console.error("Error adding skill:",r),r}},N=async a=>{try{const e=i(n,"users",a,"skills"),r=await u(e);if(r.empty)return console.log("No skills found for this user."),[];const s=[];return r.forEach(o=>{s.push({id:o.id,...o.data()})}),s}catch(e){throw console.error("Error fetching all skills:",e),e}},D=async(a,e,r)=>{if(!a||!e||!r||!r.name)return console.error("Invalid parameters: Missing uid, skillId, or updatedSkill data"),0;try{const s=i(n,"users",a,"skills"),o=m(s,c("name","==",r.name),c("__name__","!=",e));if(!(await u(o)).empty)return console.warn(`Skill with name "${r.name}" already exists.`),`Skill with name "${r.name}" already exists`;const f=l(n,"users",a,"skills",e),h=await R(a,e);return r.n_LM=h.length,r.n_finished=h.filter(y=>y.status===1).length,r.n_LM===r.n_finished?r.status=1:r.status=0,await d(f,r),console.log(`Skill with ID ${e} updated successfully`),1}catch(s){return console.error("Error updating skill:",s),0}},A=async(a,e,r)=>{try{const s=l(n,"users",a,"skills",e,"learning_materials",r),o=await g(s);if(o.exists())return o.data();throw new Error("Learning_material not found")}catch(s){throw console.error("Error fetching learning material details:",s),s}},C=async(a,e,r)=>{if(!a||!e||!r)return console.error("Invalid parameters: uid, skillId, or LMId is missing"),0;try{const s=l(n,"users",a,"skills",e,"learning_materials",r);await w(s);const o=await b(a,e);return await D(a,e,o),console.log(`Learning material with ID ${r} deleted successfully`),1}catch(s){return console.error("Error deleting learning material:",s),0}},U=async(a,e,r)=>{try{const s=i(n,"users",a,"skills",e,"learning_materials"),o=l(s);await p(o,r);const t=await b(a,e);return await D(a,e,t),console.log(`Learning material "${r.name}" added successfully with ID: ${o.id}`),{LMId:o.id}}catch(s){throw console.error("Error adding learning material:",s),s}},R=async(a,e)=>{try{const r=i(n,"users",a,"skills",e,"learning_materials"),s=await u(r);if(s.empty)return console.log("No learning materials found for this skill."),[];const o=s.docs.map(t=>({id:t.id,...t.data()}));return console.log(`${o.length} learning materials found for skill ID ${e}.`),o}catch(r){return console.error("Error fetching all learning materials:",r),{status:"error",error:r.message}}},B=async(a,e,r,s)=>{if(!a||!e||!r||!s||!s.name)return console.error("Invalid parameters: Missing uid, skillId, or updated learning material data"),0;try{const o=i(n,"users",a,"skills",e,"learning_materials"),t=m(o,c("name","==",s.name),c("__name__","!=",r));if(!(await u(t)).empty)return console.warn(`Learning material with name "${s.name}" already exists.`),`Skill with name "${s.name}" already exists`;const h=l(n,"users",a,"skills",e,"learning_materials",r);await d(h,s);const y=await b(a,e);return await D(a,e,y),console.log(`Learning material with ID ${r} updated successfully`),1}catch(o){return console.error("Error updating learning material:",o),0}};export{q as a,N as b,b as c,J as d,D as e,j as f,L as g,x as h,R as i,v as j,B as k,A as l,C as m,U as n,M as u};
